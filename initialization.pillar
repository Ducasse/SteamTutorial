{ "profile" : [
	{ "name"	: "Steam",
		"avatar": "avatar.png",
		"post"	: "Research Engineer",
		"firm"	: "Space Laboratory" }
	]
}

! Initialization

!! # Steam application component
First we need to create a subclass of ==STApplicationRootComponent==, you can name it "STManagerApp" for example.
[[[lab­el=­STApplicationRootComponent class|­lan­gua­ge=­Sma­lltalk
STApplicationRootComponent subclass: #STManagerApp
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Steam-Example'
]]]

To make it work we need to override some superclass methods.

We begin with the initialization :
[[[lab­el=­initialize|­lan­gua­ge=­Sma­lltalk
STManagerApp >> initialize
	super initialize.
	
	"Here you can choose your login object"
	login := STExampleLogin on: self.
	
	"Here you can define your application menu"
	menuEntries := {}
]]]

@@note For now menuEntries is empty but we will create some classes to fill it up soon enough.

We need a title for our application.

[[[lab­el=­app title|­lan­gua­ge=­Sma­lltalk
STManagerApp >> title
	"title will be diplayed on all the web application pages"

	^ 'Manager'
]]]

The applicationName is the url extention for your website.

[[[lab­el=­app applicationName|­lan­gua­ge=­Sma­lltalk
STManagerApp class >> applicationName
	"applicationName will be diplayed on the web application url"

	^ 'Manager'
]]]

We also need te override the ==storeToUse== method to select the store to use.

[[[lab­el=­app applicationName|­lan­gua­ge=­Sma­lltalk
STManagerApp >> storeToUse
	^ STMemoryStore
]]]

@@note For now we're using a memory store to begin with. This store is just a playbox, so every object which is stored will be lost if you start a new session.


!! # Simple Object

Now let's create a simple new STObject subclass. For example let's call it ==STCategory==. With a inctance variable ==title== which will be just a string representing the title.

[[[lab­el=­|­lan­gua­ge=­Sma­lltalk
STObject subclass: #STCategory
	instanceVariableNames: 'title'
	classVariableNames: ''
	package: 'Steam-Example'
]]]


Add accessors.

[[[lab­el=­ accessors|­lan­gua­ge=­Sma­lltalk
STCategory >> title
	^ title

STCategory >> title: aString
	title := aString
]]]

And now we need to add the description for Magritte.

[[[lab­el=­ descriptionTitle|­lan­gua­ge=­Sma­lltalk
descriptionTitle
	<magritteDescription>
	^ MAStringDescription new
		label: 'title';
		accessor: #title;
		priority: 100;
		yourself
]]]

Now we can add our new class to the ==menuEntries== in ==STManager==.

[[[lab­el=­initialize|­lan­gua­ge=­Sma­lltalk
STManagerApp >> initialize
	super initialize.
	
	"Here you can choose your login object"
	login := STExampleLogin on: self.
	
	"Here you can define your application menu"
	menuEntries := {
		STListAction on: STGameCategory title: 'Categories'
	}
]]]


After all is done, you can open a Playground then type and execute this code:
[[[lab­el=­start|­lan­gua­ge=­Sma­lltalk
STManagerApp startOn: 8181.
]]]

@note this will create the web application on port 8181.